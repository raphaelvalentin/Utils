from numpy import array, reshape, transpose, cos, sin, empty, pi, asfarray, tan, loadtxt,fromstring, fromfile
import time

__all__ = ['snp']

class snp(object):
    def __init__(self, filename=""):
        self.filename = filename
	extension = [c for c in filename.split('.')[-1]]
	if len(extension)<>3 or extension[0]<>'s' or extension[2]<>'p' :
	    raise Exception('the filename is not a snp file')
	self.n = int(extension[1])
        self._keys =  {}

    def read(self):

        with open(self.filename) as f:

            ### READ HEADER
	    while 1:
                pos = f.tell()
                line = f.readline()
	        line= line.strip()
	        if line[0] == '!':
	            pass
	        elif line[0] == '#':
		    x = line[1:].split()
		    unitFREQ = 1.0
		    try:
		        if x[0][0] == 'G':
		            unitFREQ =1e9
		        elif x[0][0] == 'M':
		            unitFREQ =1e6
		        elif x[0][0].lower() == 'k':
		            unitFREQ =1e3
		    except:
		        pass
     	            isMA = False
		    try:
		        if x[x.index('S')+1] == 'MA':
		            isMA = True
		    except:
		        pass
		    self.Z0 = 50.
		    try:
		        self.Z0 = float(x[x.index('R')+1])
		    except:
		        pass
	        else:
                    f.seek(pos)
                    break

            ### READ DATA 
            try:
                data = f.read().split()
                data = asfarray(data)  # string to float :: do the recasting by numpy (fastest)
                n = 2*self.n**2+1
                m = len(data)/n
                data = reshape(data, (m, n)) # virtual 
                data = transpose(data)  # transpose, virtual
                data[0] *= unitFREQ
                if isMA: # convert to complex
                   for i in xrange(self.n*self.n):
                        data[i*2+2] *= pi/180.
                        data[i*2+1] *= cos(data[i*2+2])
                        data[i*2+2] = data[i*2+1] * tan(data[i*2+2])
            except:
                raise Exception('the file is not well formatted')

        self.data = data
        
        ### CREATION KEYS <-> data
        self._keys =  {'s%d%d'%(i,j) : (4*i + 2*j - 5, 4*i + 2*j - 3)  for i in xrange(1, self.n+1) for j in xrange(1, self.n+1) }
        self._keys.update({'freq' : (0, )})
        if self.n == 2:  # s12 <-> s21 
            self._keys['s12'], self._keys['s21'] = self._keys['s21'], self._keys['s12']

        return self

    def keys(self):
        return self._keys.keys()

    def __getitem__(self, key):
        c = self._keys.get(key, ())
        if len(c) == 1:
            return self.data[c[0]]
        elif len(c) == 2:
            sij = empty(self.data.shape[1], dtype=complex)
            sij.real, sij.imag = self.data[c[0]:c[1]]
            return sij
        
            
    def write(self, data):

        with open(self.filename, 'w') as g:
            g.write( "! TOUCHSTONE file generated by Touchstone Python Converter\n" )
            g.write( "! Date and time: %s\n"%time.strftime("%b %d %Y %H:%M:%S") )
            g.write( "# GHZ S RI R 50\n" )
            if self.n==1:
                for row in zip(data['freq'], data['s11']):
                    freq, s11 = row
                    freq *= 1e-9
                    pattern = "{:<18.6e}{:>18.6e}{:>18.6e}\n"
                    g.write( pattern.format(freq, s11.real, s11.imag) )
            elif self.n==2:
                for row in zip(data['freq'], data['s11'], data['s12'], data['s21'], data['s22']):
                    freq, s11, s12, s21, s22 = row
                    freq *= 1e-9
                    pattern = "{:<18.6e}{:>18.6e}{:>18.6e}{:>18.6e}{:>18.6e}{:>18.6e}{:>18.6e}{:>18.6e}{:>18.6e}\n"
                    g.write( pattern.format(freq, s11.real, s11.imag, s21.real, s21.imag, s12.real, s12.imag, s22.real, s22.imag) )
            else:
                Exception('not yet implemented')
                
            


		        
if __name__=='__main__':
    for i in xrange(5):
        x = snp('top1.s2p').read()
    print x['s22']


