from numpy import array, reshape, transpose, cos, sin, empty, pi, asfarray, tan, angle, delete
import time

__all__ = ['snp', 'sf']

class snp(object):
    def __init__(self, filename=""):
        self.filename = filename
	extension = [c for c in filename.split('.')[-1]]
	if len(extension)<>3 or extension[0]<>'s' or extension[2]<>'p' :
	    raise Exception('the filename is not a snp file')
	self.n = int(extension[1])
        self.raw =  {}

    def read(self):

        with open(self.filename) as f:

            ### READ HEADER
	    while 1:
                pos = f.tell()
                line = f.readline()
	        line= line.strip()
	        if line[0] == '!':
	            pass
	        elif line[0] == '#':
		    x = line[1:].split()
		    unitFREQ = 1.0
		    try:
		        if x[0][0] == 'G':
		            unitFREQ =1e9
		        elif x[0][0] == 'M':
		            unitFREQ =1e6
		        elif x[0][0].lower() == 'k':
		            unitFREQ =1e3
		    except:
		        pass
     	            isMA = False
		    try:
		        if x[x.index('S')+1] == 'MA':
		            isMA = True
		    except:
		        pass
		    self.Z0 = 50.
		    try:
		        self.Z0 = float(x[x.index('R')+1])
		    except:
		        pass
	        else:
                    f.seek(pos)
                    break

            ### READ DATA 
            try:
                data = f.read().split()
                data = asfarray(data)  # string to float :: do the recasting by numpy (fastest)
                n = 2*self.n**2+1
                m = len(data)/n
                data = reshape(data, (m, n)) # virtual 
                data = transpose(data)  # transpose, virtual
                data[0] *= unitFREQ
                if isMA: # convert to complex
                   for i in xrange(self.n*self.n):
                        data[i*2+2] *= pi/180.
                        data[i*2+1] *= cos(data[i*2+2])
                        data[i*2+2] = data[i*2+1] * tan(data[i*2+2])
            except:
                raise Exception('the file is not well formatted')

        ### S-DATA to Dict
        size = data.shape[1]

        self.raw['freq'] = data[0]

        if self.n == 2:  # s12 <-> s21 
            value = empty(size, dtype=complex)
            value.real, value.imag = data[1:3]
            self.raw['s11'] = value
            value = empty(size, dtype=complex)
            value.real, value.imag = data[3:5]
            self.raw['s21'] = value
            value = empty(size, dtype=complex)
            value.real, value.imag = data[5:7]
            self.raw['s12'] = value
            value = empty(size, dtype=complex)
            value.real, value.imag = data[7:9]
            self.raw['s22'] = value
        else:
            for j in xrange(self.n):
                for i in xrange(self.n):
                    value = empty(size, dtype=complex)
                    value.real, value.imag = data[4*i + 2*j + 1:4*i + 2*j + 3]
                    self.raw['s%d%d'%(i+1,j+1)] = value

        return self

    def keys(self):
        return self.raw.keys()

    def __getitem__(self, key):
        return self.raw.__getitem__(key)

    def update(self, **d):
        return self.raw.update(d)
        
    def write(self):

        with open(self.filename, 'w') as g:
            g.write( "! TOUCHSTONE file generated by Touchstone Python Converter\n" )
            g.write( "! Date and time: %s\n"%time.strftime("%b %d %Y %H:%M:%S") )
            g.write( "# GHZ S RI R 50\n" )
            if self.n==1:
                for row in zip(self.raw['freq'], self.raw['s11']):
                    freq, s11 = row
                    freq *= 1e-9
                    pattern = "{:<15.6e}{:>15.6e}{:>15.6e}\n"
                    g.write( pattern.format(freq, s11.real, s11.imag) )
            elif self.n==2:
                for row in zip(self.raw['freq'], self.raw['s11'], self.raw['s12'], self.raw['s21'], self.raw['s22']):
                    freq, s11, s12, s21, s22 = row
                    freq *= 1e-9
                    pattern = "{:<15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}\n"
                    g.write( pattern.format(freq, s11.real, s11.imag, s21.real, s21.imag, s12.real, s12.imag, s22.real, s22.imag) )
            else:
                Exception('not yet implemented')
                
            

class sf(object):
    def __init__(self, filename=""):
        self.filename = filename
	extension = filename.split('.')[-1]
        if not extension=='sf':
            raise Exception('wrong extension')
	self.n = 2
        self.raw = {}

    def read(self):

        with open(self.filename) as f:
            pos2 = 2**28
            ### READ HEADER
	    while 1:
                line = f.readline()
	        line = line.strip()
	        if line[0] == '!':
                    if line.lower() == '! noise parameters':
                        pos2 = pos
                        pos3 = f.tell()
                        break
                    pos1 = f.tell()
	        elif line[0] == '#':
		    x = line[1:].split()
		    unitFREQ = 1.0
		    try:
		        if x[0][0] == 'G':
		            unitFREQ =1e9
		        elif x[0][0] == 'M':
		            unitFREQ =1e6
		        elif x[0][0].lower() == 'k':
		            unitFREQ =1e3
		    except:
		        pass
     	            isMA = False
		    try:
		        if x[x.index('S')+1] == 'MA':
		            isMA = True
		    except:
		        pass
		    self.Z0 = 50.
		    try:
		        self.Z0 = float(x[x.index('R')+1])
		    except:
		        pass
                    pos1 = f.tell()
                else:
	            pos = f.tell()

            # Search end of Noise Block    ### FIX : extra comments after Noise section
 	    while 1:
                pos4 = f.tell()
                line = f.readline()
                if line=='' or line[0] == '!':
                    break

            ### READ S-DATA BLOCK
            try:
                f.seek(pos1)
                data = f.read(pos2-pos1)
                data = data.split()
                data = asfarray(data)  # string to float 
                data = reshape(data, (len(data)/9, 9)) 
                data = transpose(data)
                if isMA: # convert to complex
                   for i in xrange(4):
                        data[i*2+2] *= pi/180.
                        data[i*2+1] *= cos(data[i*2+2])
                        data[i*2+2] = data[i*2+1] * tan(data[i*2+2])
            except BaseException, e:
                print e
                raise Exception('the file is not well formatted')

            ### READ NOISE BLOCK

            try:
                f.seek(pos3)
                noise = f.read(pos4-pos3)
                noise = noise.split()
                noise = asfarray(noise)  # string to float 
                noise = reshape(noise, (len(noise)/5, 5)) 
                noise = transpose(noise)
            except:
                raise Exception('the file is not well formatted')

        ### S-DATA to Dict
        size1 = data.shape[1]
        self.raw['freq'] = data[0]*unitFREQ
        value = empty(size1, dtype=complex)
        value.real, value.imag = data[1:3]
        self.raw['s11'] = value
        value = empty(size1, dtype=complex)
        value.real, value.imag = data[3:5]
        self.raw['s21'] = value
        value = empty(size1, dtype=complex)
        value.real, value.imag = data[5:7]
        self.raw['s12'] = value
        value = empty(size1, dtype=complex)
        value.real, value.imag = data[7:9]
        self.raw['s22'] = value

        ### Noise to Dict
        size2 = noise.shape[1]
        self.raw['nfmin'] = noise[1]
        value = empty(size2, dtype=complex)
        value.imag = noise[3] * (pi/180.)
        value.real = noise[2] * cos(value.imag)
        value.imag = noise[2] * sin(value.imag)
        self.raw['sopt'] = value
        self.raw['rn'] = noise[4]*self.Z0


        # FIX in case of discrepancy size between data and noise (noise must have less points than s-param)
        # TODO: use only 1 delete
        if size2<size1:
            print 'Warning: Noise data is different than S-param data, S-param is reduced from %d to %d points...' % (size1, size2)
            indexes = [i for i, x in enumerate(data[0]) if x not in noise[0]]
            self.raw['freq'] = delete(self.raw['freq'], indexes)
            self.raw['s11'] = delete(self.raw['s11'], indexes)
            self.raw['s12'] = delete(self.raw['s12'], indexes)
            self.raw['s21']= delete(self.raw['s21'], indexes)
            self.raw['s22']= delete(self.raw['s22'], indexes)

        return self

    def keys(self):
        return self.raw.keys()

    def __getitem__(self, key):
        return self.raw.__getitem__(key)

    def update(self, **d):
        return self.raw.update(d)

    def write(self, MA=False):

        with open(self.filename, 'w') as g:
            g.write( "! TOUCHSTONE file generated by Touchstone Python Converter\n" )
            g.write( "! Date and time: %s\n"%time.strftime("%b %d %Y %H:%M:%S") )
            if MA:
                g.write( "# GHZ S MA R 50\n" )
                for row in zip(self.raw['freq'], self.raw['s11'], self.raw['s12'], self.raw['s21'], self.raw['s22']):
                    freq, s11, s12, s21, s22 = row
                    freq *= 1e-9
                    ms11, as11 = abs(s11), angle(s11,deg=True)
                    ms12, as12 = abs(s12), angle(s12,deg=True)
                    ms21, as21 = abs(s21), angle(s21,deg=True)
                    ms22, as22 = abs(s22), angle(s22,deg=True)
                    pattern = "{:<15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}\n"
                    g.write( pattern.format(freq, ms11, as11, ms21, as21, ms12, as12, ms22, as22) )
            else:
                g.write( "# GHZ S RI R 50\n" )
                for row in zip(self.raw['freq'], self.raw['s11'], self.raw['s12'], self.raw['s21'], self.raw['s22']):
                    freq, s11, s12, s21, s22 = row
                    freq *= 1e-9
                    pattern = "{:<15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}\n"
                    g.write( pattern.format(freq, s11.real, s11.imag, s21.real, s21.imag, s12.real, s12.imag, s22.real, s22.imag) )
           
            g.write( "! noise parameters\n" )
            for row in zip(self.raw['freq'], self.raw['nfmin'], self.raw['sopt'], self.raw['rn']):
                freq, nfmin, sopt, rn = row
                freq *= 1e-9
                msopt, asopt = abs(sopt), angle(sopt,deg=True)
                rn *= 1./50.
                pattern = "{:<15.6e}{:>15.6e}{:>15.6e}{:>15.6e}{:>15.6e}\n"
                #print freq, nfmin, msopt, asopt, rn
                g.write( pattern.format(freq, nfmin, msopt, asopt, rn) )
            

		        
if __name__=='__main__':
    x = snp('top1.s2p').read()
    import cmath
    from math import pi
    angle1 = lambda x: cmath.phase(x)*180/pi
    y = x['s21'][0]
    print abs(y), angle1(y)



